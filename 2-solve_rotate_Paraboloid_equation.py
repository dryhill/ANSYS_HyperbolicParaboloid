from math import *
PI=3.14159265
#1. 根据给定的控制点，求解抛物面方程，这里是整体坐标系中抛物线绕着原点旋转theta角度，在局部坐标系中求解抛物线后转到整体坐标系。
#z平面整体提升到整体坐标系中顶点标高，简化公式
#局部坐标系中抛物线方程 z=(x/a)^2
#局部坐标系中的抛物面方程是 z=(x/a)^2-(y/b)^2，因中心点已经确定好是平面投影中心不变，
#控制点： 凹脊线左端点、原点、右端点，凹脊线的拱脚
#局部坐标系中母线方程 (x-c)/a±y/b=0

#----------------------------
#4个控制点，其中第二个点，即原点必须是(0,0)
p=[
(-62.1, 0,  30), 
(0,     0,  15.8), 
(62.1,  0,  40), 
(0, 36.577, 7.5)
]

#整体坐标系x-y平面提升到原点标高
DZ=p[1][2]

x1=p[0][0]
y1=p[0][1]
z1=p[0][2]-DZ

x2=p[1][0]
y2=p[1][1]
z2=p[1][2]-DZ

x3=p[2][0]
y3=p[2][1]
z3=p[2][2]-DZ

x4=p[3][0]
y4=p[3][1]
z4=p[3][2]-DZ



def rot(x,y,z, theta):
    #从整体坐标转换到局部坐标
    theta=(theta/180.0*PI)
    cs=cos(theta)
    sn=sin(theta)
    X=cs*x+sn*z
    Z=(-1)*sn*x+cs*z
    return(X, y, Z)

#在局部坐标系中，根据1点求a，然后求Z3的期望值
def TEZ3(x1,y1,z1,x3,y3,z3,T):
    (X1, Y1, Z1)=rot(x1,y1,z1,T)
    (X3, Y3, Z3)=rot(x3,y3,z3,T)   
    #根据X1,Y1,Z1求方程，z=(x/a)^2
    a=(X1**2/Z1)**0.5
    #根据方程求X3的对应值EZ3
    EZ3=(X3/a)**2
    return(EZ3)
    
    
#循环求theta，用逐渐增量法，步长要足够小
T0=0
n=0
dT=0.001
T=0
while True:
    #先求得3点在局部坐标系中的z坐标
    (X3, Y3, Z3)=rot(x3,y3,z3,T)
    
    #再求得用当前转角求得的局部坐标系中的z坐标，T从0开始，所以一开始是小于Z3的
    EZ3T=TEZ3(x1,y1,z1,x3,y3,z3,T)
    
    if EZ3T>Z3:
        break
    else:    
        n=n+1
        T=T0+n*dT
    
    if n>(45/dT):
        break
    
print('n', n)
print('theta', T, Z3, EZ3T)
#求a，用点1
(X1, Y1, Z1)=rot(x1,y1,z1,T)
a=(X1**2/Z1)**0.5
#求b,局部坐标系中的抛物面方程是 Z4=-(Y4/b)^2
(X4, Y4, Z4)=rot(x4,y4,z4,T)
b=((-1)*Y4**2/Z4)**0.5        
#    
#
#
print('a=', a)
print('b=', b)
#print('c=', c)
#print('d=', d)
#
#print('z1', (x1-c)**2/a**2-y1**2/b**2+d)
#print('z2', (x2-c)**2/a**2-y2**2/b**2+d)
#print('z3', (x3-c)**2/a**2-y3**2/b**2+d)
#print('z4', (x4-c)**2/a**2-y4**2/b**2+d)
